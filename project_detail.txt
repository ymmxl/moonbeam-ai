# MoonbeamAI: Financial News Sentiment Trading System

## Project Overview
MoonbeamAI is a financial news sentiment analysis system that processes headlines to generate trading signals for stocks. The system works through a pipeline of AI agents that analyze, process, and aggregate data to produce actionable trading signals.

## System Components

### Web Interface
- Built with Flask and Flask-SocketIO (app.py)
- Alternative API with FastAPI (api.py)
- Provides real-time updates via WebSockets

### System Coordinator
- Manages the flow of data between agents
- Maintains system state
- Tracks signal history
- Notifies listeners of new signals

### Headline Simulator
- Generates random financial headlines for testing
- Simulates positive, neutral, and negative news
- Configurable interval between headlines

### AI Agents
1. **HeadlineClassifierAgent**: 
   - Analyzes headlines to determine sentiment (positive, neutral, or negative)
   - Uses simple keyword matching (designed to be replaced with ML model)
   - Returns sentiment classification with confidence score

2. **TickerMapperAgent**: 
   - Maps company names in headlines to stock ticker symbols
   - Uses predefined mappings and pattern matching
   - Extensible with API lookups for unknown companies

3. **SentimentAggregatorAgent**: 
   - Aggregates sentiment data over a configurable time window (default 5 minutes)
   - Calculates weighted averages based on confidence
   - Maintains history of sentiment for each ticker

4. **SignalDecisionAgent**: 
   - Converts aggregated sentiment data into trading signals (LONG, SHORT, or FLAT)
   - Uses configurable thresholds for decision making
   - Returns signals with confidence ratings

## Workflow
1. Headlines are received (either from the simulator or user input)
2. The headline is classified for sentiment
3. Company names are extracted and mapped to ticker symbols
4. Sentiment is aggregated over time for each ticker
5. Trading signals are generated based on sentiment trends
6. Results are stored and broadcast to connected clients via WebSockets

## Technical Implementation
- Built with Python
- Uses asyncio for concurrent processing
- Flask and Flask-SocketIO for web interface
- FastAPI as an alternative API
- All agents inherit from a BaseAgent class
- Structured logging to both console and JSON files
- Rule-based agents rather than ML-based (though designed for ML integration)

## Future Improvements
The system is designed to allow for more sophisticated implementations:
- Replace keyword-based sentiment analysis with ML models
- Enhance company name extraction with named entity recognition
- Integrate with real news APIs instead of the simulator
- Add more sophisticated trading signal algorithms 